#!/bin/bash
set -euo pipefail

# Arg 1: Ścieżka do pliku konfiguracyjnego kernela
# Arg 2: Sufiks do nazwy kernela (np. nick)
if [[ $# -ne 2 ]]; then
    echo "Usage: $0 <kernel-config-path> <kernel-release-suffix>"
    echo "Example: $0 kernel-config/6.16.8-1-default/custom.config dawciobiel"
    exit 1
fi

KERNEL_CONFIG_PATH="$1"
CUSTOM_KERNEL_RELEASE_SUFFIX="${2}"

# --- Parametry Budowania ---
KERNEL_VERSION="6.16.8"
MAKE_JOBS="9" # Dla AMD FX-8350 (liczba rdzeni + 1)
KERNEL_TAR="linux-${KERNEL_VERSION}.tar.xz"
REPO_ROOT="/workspace"
RPMBUILD_ROOT="/root/rpmbuild"
BUILD_TIMESTAMP=$(date +%Y%m%d_%H%M%S)
CUSTOM_KERNEL_RELEASE_SUFFIX="${CUSTOM_KERNEL_RELEASE_SUFFIX}-${BUILD_TIMESTAMP}"

# --- Logowanie ---
LOG_DIR="$REPO_ROOT/log/${BUILD_TIMESTAMP}"
mkdir -p "$LOG_DIR"
LOG_FILE="$LOG_DIR/build.log"

# Przekierowanie całego wyjścia do pliku logu i na ekran
exec > >(tee -a "$LOG_FILE") 2>&1

echo ">>> Build started at: $(date)"
echo ">>> Kernel Config: $KERNEL_CONFIG_PATH"
echo ">>> Custom Suffix: $CUSTOM_KERNEL_RELEASE_SUFFIX"
echo ">>> Full build log will be available at: $LOG_FILE"

# --- Przygotowanie Środowiska ---
mkdir -p "$RPMBUILD_ROOT"/{BUILD,BUILDROOT,RPMS,SOURCES,SPECS,SRPMS}

mkdir -p "$REPO_ROOT/kernel-sources"
if [[ ! -f "$REPO_ROOT/kernel-sources/$KERNEL_TAR" ]]; then
    echo ">>> Downloading kernel source..."
    wget "https://cdn.kernel.org/pub/linux/kernel/v6.x/${KERNEL_TAR}" -O "$REPO_ROOT/kernel-sources/$KERNEL_TAR"
fi
cp "$REPO_ROOT/kernel-sources/$KERNEL_TAR" "$RPMBUILD_ROOT/SOURCES/"

# --- Dynamiczne Generowanie Pliku .spec ---
echo ">>> Generating dynamic .spec file..."

# 1. Przechodzimy do katalogu ze źródłami, aby uzyskać finalną nazwę kernela
cd "$RPMBUILD_ROOT/BUILD"
tar -xf "$RPMBUILD_ROOT/SOURCES/$KERNEL_TAR"
cd "linux-$KERNEL_VERSION"

echo "--- VERIFICATION: Listing unpacked source directory ---"
ls -lA
echo "-----------------------------------------------------"

# 2. Kopiujemy i przygotowujemy konfigurację
cp "$REPO_ROOT/$KERNEL_CONFIG_PATH" .config
make olddefconfig

# 3. Ustalamy finalną nazwę wersji kernela oraz wersję dla RPM
FINAL_KERNEL_RELEASE=$(make -s kernelrelease LOCALVERSION=-$CUSTOM_KERNEL_RELEASE_SUFFIX)
RPM_RELEASE_STRING=$(echo "${FINAL_KERNEL_RELEASE}" | sed "s/^${KERNEL_VERSION}-//" | tr '-' '.')

echo ">>> Final kernel release string (for uname -r): $FINAL_KERNEL_RELEASE"
echo ">>> RPM Release string (for spec file): $RPM_RELEASE_STRING"

RPM_SPEC="$RPMBUILD_ROOT/SPECS/kernel.spec"

# 4. Tworzymy plik .spec z sub-pakietem dla modułów
cat > "$RPM_SPEC" <<EOF
# Globalne definicje
%global final_krelease ${FINAL_KERNEL_RELEASE}
%global custom_suffix ${CUSTOM_KERNEL_RELEASE_SUFFIX}
%global _build_id_links %{nil}

# --- Pakiet Główny (jądro) ---
Name:           kernel-%{custom_suffix}
Version:        ${KERNEL_VERSION}
Release:        ${RPM_RELEASE_STRING}
Summary:        Custom kernel for this project
License:        GPLv2
Group:          System/Kernel
Source0:        ${KERNEL_TAR}
BuildRequires:  bc, rsync, openssl, openssl-devel, elfutils, dwarves
Provides:       kernel = %{version}-%{release}

%description
Custom kernel for this project (%{final_krelease}).

# --- Sub-pakiet dla modułów ---
%package modules
Summary:        Kernel modules for the custom kernel
Group:          System/Kernel
Requires:       kernel-%{custom_suffix} = %{version}-%{release}
Provides:       kernel-modules-%{custom_suffix} = %{version}-%{release}

%description modules
Kernel modules for the custom kernel (%{final_krelease}).

# --- Proces Budowania ---
%prep
%setup -q -n linux-%{version}
# Kopiowanie konfiguracji jest już zrobione na zewnątrz, ale spec musi być kompletny
cp "$REPO_ROOT/$KERNEL_CONFIG_PATH" .config
make olddefconfig

%build
make -j${MAKE_JOBS} LOCALVERSION=-%{custom_suffix}

%install
# Instalacja jądra
mkdir -p %{buildroot}/boot
cp -v arch/x86/boot/bzImage %{buildroot}/boot/vmlinuz-%{final_krelease}
cp -v System.map %{buildroot}/boot/System.map-%{final_krelease}
cp -v .config %{buildroot}/boot/config-%{final_krelease}

# Instalacja modułów
make modules_install INSTALL_MOD_PATH=%{buildroot} LOCALVERSION=-%{custom_suffix} DEPMOD=/bin/true

echo "--- VERIFICATION: Listing installed modules directory ---"
ls -lR %{buildroot}/lib/modules/
echo "--------------------------------------------------------"

# --- Definicje Plików ---
%files
/boot/vmlinuz-%{final_krelease}
/boot/System.map-%{final_krelease}
/boot/config-%{final_krelease}

%files modules
/lib/modules/%{final_krelease}/**

%changelog
* $(date "+%a %b %d %Y") dawciobiel - Initial custom build.
- Custom build based on new conventions.
EOF

# --- Uruchomienie Budowania RPM ---
echo ">>> Starting RPM build..."
rpmbuild -bb --define "_topdir $RPMBUILD_ROOT" "$RPM_SPEC"
RPMBUILD_EXIT_CODE=$?

if [ $RPMBUILD_EXIT_CODE -ne 0 ]; then
    echo ">>> ERROR: RPM build failed with exit code $RPMBUILD_EXIT_CODE."
    exit $RPMBUILD_EXIT_CODE
fi

# --- Zakończenie ---
echo ">>> RPM build finished successfully."
echo ">>> RPMs are available in $RPMBUILD_ROOT/RPMS/x86_64/"
find "$RPMBUILD_ROOT/RPMS/x86_64" -name "*.rpm" -exec ls -lh {} +

echo ">>> Copying RPMs to workspace..."
mkdir -p "$REPO_ROOT/rpms/"
cp -v "$RPMBUILD_ROOT"/RPMS/x86_64/*.rpm "$REPO_ROOT/rpms/"

echo ">>> Build finished at: $(date)"
